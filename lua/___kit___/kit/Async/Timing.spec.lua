local Async = require('___kit___.kit.Async')
local Timing = require('___kit___.kit.Async.Timing')

describe('kit.Async.Timing', function()
  describe('debounce', function()
    it('should callback after timeout', function()
      Async.run(function()
        local count = 0
        local fn = Timing.debounce(function()
          count = count + 1
        end, { timeout_ms = 200 })
        fn.timer:set_schedule_fn(function(callback)
          callback()
        end)
        fn()
        assert.are.equal(count, 0)
        fn()
        assert.are.equal(count, 0)
        vim.wait(200)
        assert.are.equal(count, 1)
        fn()
        fn()
        assert.are.equal(count, 1)
        vim.wait(200)
        assert.are.equal(count, 2)
        vim.wait(200)
        assert.are.equal(count, 2)
      end):sync(5000)
    end)
  end)

  describe('throttle', function()
    it('should callback after timeout', function()
      Async.run(function()
        local count = 0
        local fn = Timing.throttle(function()
          count = count + 1
        end, { timeout_ms = 200, leading = true })
        fn.timer:set_schedule_fn(function(callback)
          callback()
        end)
        fn()
        assert.are.equal(count, 1)
        fn()
        assert.are.equal(count, 1)
        vim.wait(200)
        assert.are.equal(count, 2)
        fn()
        fn()
        assert.are.equal(count, 2)
        vim.wait(200)
        assert.are.equal(count, 3)
        vim.wait(200)
        assert.are.equal(count, 3)
      end):sync(5000)
    end)

    it('should callback immediately if leading=true specified', function()
      Async.run(function()
        local count = 0
        local fn = Timing.throttle(function()
          count = count + 1
        end, { timeout_ms = 200, leading = true })
        fn.timer:set_schedule_fn(function(callback)
          callback()
        end)
        fn()
        assert.are.equal(count, 1)
      end):sync(5000)
    end)

    it('should callback lately if leading=false specified', function()
      Async.run(function()
        local count = 0
        local fn = Timing.throttle(function()
          count = count + 1
        end, { timeout_ms = 200, leading = false })
        fn.timer:set_schedule_fn(function(callback)
          callback()
        end)
        fn()
        assert.are.equal(count, 0)
      end):sync(5000)
    end)
  end)
end)
