local RegExp = require('___kit___.kit.Vim.RegExp')

describe('kit.Vim.RegExp', function()
  describe('.gsub', function()
    it('should replace with vim regex', function()
      assert.are.equal(RegExp.gsub('aaa bbbaaa aaaaaa bbaaaa', [[\%(bbb\)\@<!aaa]], 'baz'), 'baz bbbaaa bazbaz bbbaza')
    end)
    it('should replace like string.gsub', function()
      assert.are.equal(RegExp.gsub('aaaaa', [[aa]], 'a'), string.gsub('aaaaa', 'aa', 'a'))
      assert.are.equal(RegExp.gsub('aaaaa', [[a]], 'aa'), string.gsub('aaaaa', 'a', 'aa'))
      assert.are.equal(RegExp.gsub('aaaaa', [[aa]], 'aa'), string.gsub('aaaaa', 'aa', 'aa'))
    end)
    describe('.extract_at', function()
      it('should extract pattern text from specified position', function()
        local function spec(text, pattern)
          local position = text:find('|', 1, true)
          return RegExp.extract_at(text:gsub('|', ''), pattern, position)
        end

        assert.equal(spec('foo|bar', 'foo'), 'foo')
        assert.equal(spec('foo|bar', 'bar'), 'bar')
        assert.equal(spec('foo 1 + 2 * (3 - 1) | bar', [=[\s*\zs\%(\s\|math\.\w\+\|\d\+\%(\.\d\+\)\?\|[()*/+\-,]\)\+]=]), '1 + 2 * (3 - 1)  ')
      end)
    end)
  end)
end)
